{"ast":null,"code":"var _jsxFileName = \"/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetails, updateUser } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserEditScreen = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const params = useParams();\n  const userId = params.id;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      navigate('/admin/userlist');\n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n\n        if (user.isAdmin) {\n          setIsAdmin(true);\n        }\n      }\n    }\n  }, [dispatch, userId, user, successUpdate, navigate]);\n\n  const submitHandler = e => {\n    e.prevetDefault();\n    dispatch(updateUser({\n      _id: userId,\n      name,\n      email,\n      isAdmin\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-light my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 35\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 33\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isadmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Is Admin\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserEditScreen, \"sLUEb1NRy5RUMCE0DselR/EdpRM=\", false, function () {\n  return [useNavigate, useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/UserEditScreen.js"],"names":["React","useEffect","useState","Link","useParams","useNavigate","Form","Button","useDispatch","useSelector","Message","Loader","FormContainer","getUserDetails","updateUser","USER_UPDATE_RESET","UserEditScreen","navigate","params","userId","id","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","_id","submitHandler","e","prevetDefault","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\n\nconst UserEditScreen = () => {\n    const navigate = useNavigate()\n    const params = useParams()\n    const userId = params.id;\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector((state) => state.userDetails)\n    const { loading, error, user } = userDetails\n\n    const userUpdate = useSelector((state) => state.userUpdate)\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = userUpdate\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: USER_UPDATE_RESET })\n            navigate('/admin/userlist')\n        } else {\n            if (!user.name || user._id !== userId) {\n                dispatch(getUserDetails(userId))\n\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n        \n                if (user.isAdmin) {\n\n                    setIsAdmin(true)\n\n                }\n\n\n            }\n        }\n\n    }, [dispatch, userId, user, successUpdate, navigate])\n\n    const submitHandler = (e) => {\n        e.prevetDefault()\n        dispatch(updateUser({ _id: userId, name, email, isAdmin }))\n\n    }\n    return (\n        <>\n            <Link to='/admin/userlist' className='btn btn-light my-3'>\n                Go Back\n            </Link>\n            <FormContainer>\n                <h1>Edit User</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                {loading ? (\n                    <Loader />\n                ) : error ? (\n                    <Message variant='danger'>{error}</Message>\n                ) : (\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type='name'\n                                placeholder='Enter name'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='email'>\n                            <Form.Label>Email Address</Form.Label>\n                            <Form.Control\n                                type='email'\n                                placeholder='Enter email'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='isadmin'>\n                            <Form.Check\n                                type='checkbox'\n                                label='Is Admin'\n                                checked={isAdmin}\n                                onChange={(e) => setIsAdmin(e.target.checked)}\n                            ></Form.Check>\n                        </Form.Group>\n\n                        <Button type='submit' variant='primary'>\n                            Update\n                        </Button>\n                    </Form>\n                )}\n            </FormContainer>\n        </>\n    )\n}\n\nexport default UserEditScreen"]},"metadata":{},"sourceType":"module"}