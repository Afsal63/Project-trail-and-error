{"ast":null,"code":"var _jsxFileName = \"/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/ProductEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { Form, Button, Container, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listProductDetails, updateProduct } from '../actions/productAction';\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProductEditScreen = () => {\n  _s();\n\n  const params = useParams();\n  const productId = params.id;\n  const navigate = useNavigate();\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState([]);\n  const [brand, setBrand] = useState('');\n  const [category, setCategory] = useState('');\n  const [countInStock, setCountInStock] = useState(0);\n  const [description, setDescription] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const dispatch = useDispatch();\n  const productDetails = useSelector(state => state.productDetails);\n  const {\n    loading,\n    error,\n    product\n  } = productDetails;\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: PRODUCT_UPDATE_RESET\n      });\n      navigate('/admin/productlist');\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setImage(product.image);\n        setBrand(product.brand);\n        setCategory(product.category);\n        setCountInStock(product.countInStock);\n        setDescription(product.description); // setRating(product.rating)\n        // setNumReviews(product.numReviews)\n      }\n    }\n  }, [dispatch, navigate, productId, product, successUpdate]);\n\n  const uploadFileHandler = async e => {\n    const files = Array.from(e.target.files);\n    setImage([]);\n    setImagesPreview([]);\n    files.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImage(oldArray => [...oldArray, reader.result]); // setImagesPreview((oldArray) => [...oldArray, reader.result]);\n        }\n      };\n\n      reader.readAsDataURL(file);\n      console.log(image);\n    });\n    setUploading(true); // try {\n    //   const config={\n    //     headers:{\n    //       'Content-Type': 'multipart/form-data'\n    //     }\n    //   }\n    //   // const{data} =await axios.post('/api/upload',formData,config)\n    //   setImage(data)\n    //   setUploading(false)\n    //   } catch (error) {\n    //     console.error(error)\n    //     setUploading(false)\n    //   }\n    // }\n\n    const submitHandler = e => {\n      e.preventDefault();\n      dispatch(updateProduct({\n        _id: productId,\n        name,\n        price,\n        image,\n        brand,\n        category,\n        description,\n        countInStock\n      }));\n      const Myform = new FormData();\n      image.forEach(img => {\n        Myform.append(\"image\", img);\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/admin/productlist\",\n          className: \"btn btn-light my-3\",\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              className: \"m-auto\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Edit Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 15\n              }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 33\n              }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n                variant: \"danger\",\n                children: errorUpdate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 31\n              }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n                variant: \"danger\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, this) : /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: submitHandler,\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"name\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"name\",\n                    placeholder: \"Enter name\",\n                    value: name,\n                    onChange: e => setName(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"price\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"number\",\n                    placeholder: \"Enter price\",\n                    value: price,\n                    onChange: e => setPrice(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"image\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: \"Enter image url\",\n                    value: image,\n                    onChange: e => setImage(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"file\",\n                    label: \"Choose File\" // custom\n                    ,\n                    onChange: uploadFileHandler\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 15\n                  }, this), uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"brand\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Brand\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: \"Enter brand \",\n                    value: brand,\n                    onChange: e => setBrand(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"countInStock\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Count In Stock\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"number\",\n                    placeholder: \"Enter countInStock\",\n                    value: countInStock,\n                    onChange: e => setCountInStock(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"category\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Category\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: \"Enter Category \",\n                    value: category,\n                    onChange: e => setCategory(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"description\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: \"Enter description \",\n                    value: description,\n                    onChange: e => setDescription(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"primary\",\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  };\n};\n\n_s(ProductEditScreen, \"nu40FBZCVTbAUKQr3t2/ALU1psQ=\", false, function () {\n  return [useParams, useNavigate, useDispatch, useSelector, useSelector];\n});\n\n_c = ProductEditScreen;\nexport default ProductEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductEditScreen\");","map":{"version":3,"sources":["/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/ProductEditScreen.js"],"names":["React","useState","useEffect","Link","useNavigate","useParams","Form","Button","Container","Row","Col","useDispatch","useSelector","axios","Message","Loader","listProductDetails","updateProduct","PRODUCT_UPDATE_RESET","ProductEditScreen","params","productId","id","navigate","name","setName","price","setPrice","image","setImage","brand","setBrand","category","setCategory","countInStock","setCountInStock","description","setDescription","uploading","setUploading","dispatch","productDetails","state","loading","error","product","productUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","_id","uploadFileHandler","e","files","Array","from","target","setImagesPreview","forEach","file","reader","FileReader","onload","readyState","oldArray","result","readAsDataURL","console","log","submitHandler","preventDefault","Myform","FormData","img","append","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { Form,  Button, Container,  Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport axios from 'axios'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { listProductDetails, updateProduct } from '../actions/productAction'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\n\n\n\n\nconst ProductEditScreen = () => {\n  const params = useParams()\n  const productId = params.id;\n  const navigate = useNavigate();\n\n  const [name, setName] = useState('')\n  const [price, setPrice] = useState(0)\n  const [image, setImage] = useState([])\n  const [brand, setBrand] = useState('')\n  const [category, setCategory] = useState('')\n  const [countInStock, setCountInStock] = useState(0)\n  const [description, setDescription] = useState('')\n const [uploading,setUploading]=useState(false)\n  \n\n  const dispatch = useDispatch()\n\n  const productDetails = useSelector((state) => state.productDetails)\n  const { loading, error, product } = productDetails\n\n  const productUpdate = useSelector((state) => state.productUpdate)\n  const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = productUpdate\n\n\n   \n\n\n  useEffect(() => {\n   \n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET })\n      navigate('/admin/productlist')\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId))\n       \n      } else {\n        setName(product.name)\n        setPrice(product.price)\n        setImage(product.image)\n        setBrand(product.brand)\n        setCategory(product.category)\n        setCountInStock(product.countInStock)\n        setDescription(product.description)\n        // setRating(product.rating)\n        // setNumReviews(product.numReviews)\n      }\n    }\n  }, [dispatch, navigate, productId, product,successUpdate ])\n  \n\n  \n  const uploadFileHandler = async(e)=>{\n\n    const files = Array.from(e.target.files);\n    setImage([]);\n    setImagesPreview([]);\n\n    files.forEach((file) => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImage((oldArray) => [...oldArray, reader.result]);\n          // setImagesPreview((oldArray) => [...oldArray, reader.result]);\n        }\n      };\n      reader.readAsDataURL(file);\n      console.log(image);\n    });\n\n\n    setUploading(true)\n    // try {\n    //   const config={\n    //     headers:{\n    //       'Content-Type': 'multipart/form-data'\n    //     }\n    //   }\n      \n    //   // const{data} =await axios.post('/api/upload',formData,config)\n    //   setImage(data)\n    //   setUploading(false)\n\n  //   } catch (error) {\n  //     console.error(error)\n  //     setUploading(false)\n  //   }\n  // }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\ndispatch(updateProduct({\n  _id: productId,\n  name,\n  price,\n  image,\n  brand,\n  category,\n  description,\n  countInStock,\n  \n}))\nconst Myform=new FormData();\n    image.forEach((img)=>{\n      Myform.append(\"image\",img)\n    })\n  }\n\n  return (\n    <>\n      <Container>\n        <Link to='/admin/productlist' className='btn btn-light my-3'>\n          Go Back\n        </Link>\n        <Container>\n          <Row>\n            <Col md={6} className='m-auto'>\n              <h1>Edit Product</h1>\n\n              {loadingUpdate && <Loader />}\n              {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n              {loading ? (\n                <Loader />\n              ) : error ? (\n                <Message variant='danger'>{error}</Message>\n              ) : (\n                <Form onSubmit={submitHandler}>\n                  <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                      type='name'\n                      placeholder='Enter name'\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='price'>\n                    <Form.Label>price</Form.Label>\n                    <Form.Control\n                      type='number'\n                      placeholder='Enter price'\n                      value={price}\n                      onChange={(e) => setPrice(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='image'>\n              <Form.Label>Image</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Enter image url'\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n              >\n                \n              </Form.Control>\n\n              <Form.Control\n                type='file'\n                label='Choose File'\n                // custom\n                onChange={uploadFileHandler}\n              ></Form.Control>\n              {uploading && <Loader />}\n            </Form.Group>\n\n                  <Form.Group controlId='brand'>\n                    <Form.Label>Brand</Form.Label>\n                    <Form.Control\n                      type='text'\n                      placeholder='Enter brand '\n                      value={brand}\n                      onChange={(e) => setBrand(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='countInStock'>\n                    <Form.Label>Count In Stock</Form.Label>\n                    <Form.Control\n                      type='number'\n                      placeholder='Enter countInStock'\n                      value={countInStock}\n                      onChange={(e) => setCountInStock(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='category'>\n                    <Form.Label>Category</Form.Label>\n                    <Form.Control\n                      type='text'\n                      placeholder='Enter Category '\n                      value={category}\n                      onChange={(e) => setCategory(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n                 \n\n                  <Form.Group controlId='description'>\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                      type='text'\n                      placeholder='Enter description '\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Button type='submit' variant='primary'>\n                    Update\n                  </Button>\n\n                </Form>\n              )}\n             \n            </Col>\n          </Row>\n        </Container>\n\n      </Container>\n    </>\n  )\n}\n}\nexport default ProductEditScreen"]},"metadata":{},"sourceType":"module"}