{"ast":null,"code":"var _jsxFileName = \"/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetails } from '../actions/userActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserEditScreen = () => {\n  _s();\n\n  const userId = useParams();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  useEffect(() => {\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserDetails(userId));\n    } else {\n      setName(user.name);\n      setNam(user.email);\n      setName(user.name);\n    }\n  }, []);\n\n  const submitHandler = e => {\n    e.prevetDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-light my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 2\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        varian: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeHolder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeHolder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isadmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Is Admin\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserEditScreen, \"eMHCEcLaoL4cAYQYu1cdwUeAWOo=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/UserEditScreen.js"],"names":["React","useEffect","useState","Link","useParams","Form","Button","useDispatch","useSelector","Message","Loader","FormContainer","getUserDetails","UserEditScreen","userId","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","userDetails","state","loading","error","user","_id","setNam","submitHandler","e","prevetDefault","target","value","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,IAAR,EAAaC,SAAb,QAA8B,kBAA9B;AACA,SAAQC,IAAR,EAAaC,MAAb,QAA0B,iBAA1B;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAAQC,cAAR,QAA6B,wBAA7B;;;;AAGA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC7B,QAAMC,MAAM,GAAEV,SAAS,EAAvB;AAEA,QAAM,CAACW,IAAD,EAAMC,OAAN,IAAed,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAM,CAACe,KAAD,EAAOC,QAAP,IAAiBhB,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACiB,OAAD,EAASC,UAAT,IAAqBlB,QAAQ,CAAC,KAAD,CAAnC;AAEA,QAAMmB,QAAQ,GAACd,WAAW,EAA1B;AAEA,QAAMe,WAAW,GAAGd,WAAW,CAAEe,KAAD,IAASA,KAAK,CAACD,WAAhB,CAA/B;AACA,QAAM;AAACE,IAAAA,OAAD;AAASC,IAAAA,KAAT;AAAeC,IAAAA;AAAf,MAAqBJ,WAA3B;AAEArB,EAAAA,SAAS,CAAC,MAAI;AACb,QAAI,CAACyB,IAAI,CAACX,IAAN,IAAcW,IAAI,CAACC,GAAL,KAAYb,MAA9B,EAAqC;AACrCO,MAAAA,QAAQ,CAACT,cAAc,CAACE,MAAD,CAAf,CAAR;AACC,KAFD,MAEK;AACDE,MAAAA,OAAO,CAACU,IAAI,CAACX,IAAN,CAAP;AACAa,MAAAA,MAAM,CAACF,IAAI,CAACT,KAAN,CAAN;AACAD,MAAAA,OAAO,CAACU,IAAI,CAACX,IAAN,CAAP;AACH;AACD,GARQ,EAQP,EARO,CAAT;;AASA,QAAMc,aAAa,GAAEC,CAAD,IAAK;AACrBA,IAAAA,CAAC,CAACC,aAAF;AAEH,GAHD;;AAIE,sBACA;AAAA,4BACA,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE,iBAAV;AAA4B,MAAA,SAAS,EAAC,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAIC,QAAC,aAAD;AAAA,8BACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADE,EAEDP,OAAO,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAAH,GAAeC,KAAK,gBAAG,QAAE,OAAF;AAAU,QAAA,MAAM,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAAH,gBACxB,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEI,aAAhB;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACA,YAAA,IAAI,EAAC,MADL;AAEA,YAAA,WAAW,EAAC,YAFZ;AAGA,YAAA,KAAK,EAAEd,IAHP;AAIA,YAAA,QAAQ,EAAGe,CAAD,IAAMd,OAAO,CAACc,CAAC,CAACE,MAAF,CAASC,KAAV;AAJvB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAWM,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,OAAtB;AAAA,kCACF,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADE,eAEF,QAAC,IAAD,CAAM,OAAN;AACA,YAAA,IAAI,EAAC,OADL;AAEA,YAAA,WAAW,EAAC,aAFZ;AAGA,YAAA,KAAK,EAAEhB,KAHP;AAIA,YAAA,QAAQ,EAAGa,CAAD,IAAMZ,QAAQ,CAACY,CAAC,CAACE,MAAF,CAASC,KAAV;AAJxB;AAAA;AAAA;AAAA;AAAA,kBAFE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXN,eAsBM,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,SAAtB;AAAA,iCAEF,QAAC,IAAD,CAAM,KAAN;AACA,YAAA,IAAI,EAAC,UADL;AAEA,YAAA,KAAK,EAAC,UAFN;AAIA,YAAA,OAAO,EAAEd,OAJT;AAKA,YAAA,QAAQ,EAAGW,CAAD,IAAMV,UAAU,CAACU,CAAC,CAACE,MAAF,CAASE,OAAV;AAL1B;AAAA;AAAA;AAAA;AAAA;AAFE;AAAA;AAAA;AAAA;AAAA,gBAtBN,eAiCM,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjCN;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA,kBADA;AAiDD,CA1ED;;GAAMrB,c;UACQT,S,EAMCG,W,EAEKC,W;;;KATdK,c;AA4EN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {Link,useParams } from 'react-router-dom'\nimport {Form,Button} from 'react-bootstrap'\nimport {useDispatch,useSelector} from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport {getUserDetails} from '../actions/userActions'\n\n\nconst UserEditScreen = () => {\nconst userId =useParams()\n\nconst [name,setName]=useState('')\nconst [email,setEmail]=useState('')\nconst [isAdmin,setIsAdmin]=useState(false)\n\nconst dispatch=useDispatch()\n\nconst userDetails = useSelector((state)=>state.userDetails)\nconst {loading,error,user}=userDetails\n\nuseEffect(()=>{\n if (!user.name || user._id !==userId){\n dispatch(getUserDetails(userId))\n }else{\n     setName(user.name)\n     setNam(user.email)\n     setName(user.name)\n }\n},[])\nconst submitHandler=(e)=>{\n    e.prevetDefault()\n\n}\n  return (\n  <>\n  <Link to ='/admin/userlist' className='btn btn-light my-3'>\n      Go Back\n      </Link>\n   <FormContainer>\n <h1>Edit User</h1>\n {loading ? <Loader/> : error ? < Message varian='danger'>{error}</Message> :(\n     <Form onSubmit={submitHandler}>\n       <Form.Group controlId='name'>\n         <Form.Label>Name</Form.Label>  \n         <Form.Control\n         type='name'\n         placeHolder='Enter name'\n         value={name}\n         onChange={(e)=> setName(e.target.value)}>\n             </Form.Control>\n           </Form.Group>  \n\n           <Form.Group controlId='email'>\n         <Form.Label>Email</Form.Label>  \n         <Form.Control\n         type='email'\n         placeHolder='Enter email'\n         value={email}\n         onChange={(e)=> setEmail(e.target.value)}>\n             </Form.Control>\n           </Form.Group>  \n        \n\n           <Form.Group controlId='isadmin'>\n       \n         <Form.Check\n         type='checkbox'\n         label='Is Admin'\n         \n         checked={isAdmin}\n         onChange={(e)=> setIsAdmin(e.target.checked)}>\n             </Form.Check>\n           </Form.Group>  \n\n           <Button type='submit' variant='primary'>\n               Update</Button>\n         </Form>\n )}\n\n   </FormContainer>\n  </>\n  )\n}\n\nexport default UserEditScreen"]},"metadata":{},"sourceType":"module"}