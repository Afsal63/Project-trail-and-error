{"ast":null,"code":"var _jsxFileName = \"/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/ProductEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// import React, { useState, useEffect } from 'react'\n// import { Link, useNavigate, useParams } from 'react-router-dom'\n// import { Form, Button, Container,  Row, Col } from 'react-bootstrap'\n// import { useDispatch, useSelector } from 'react-redux'\n// import axios from 'axios'\n// import Message from '../components/Message'\n// import Loader from '../components/Loader'\n// import { listProductDetails, updateProduct } from '../actions/productAction'\n// import { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\n// const ProductEditScreen = () => {\n//   const params = useParams()\n//   const productId = params.id;\n//   const navigate = useNavigate();\n//   const [name, setName] = useState('')\n//   const [price, setPrice] = useState(0)\n//   const [image, setImage] = useState('')\n//   const [brand, setBrand] = useState('')\n//   const [category, setCategory] = useState('')\n//   const [countInStock, setCountInStock] = useState(0)\n//   const [description, setDescription] = useState('')\n//  const [uploading,setUploading]=useState(false)\n//   const dispatch = useDispatch()\n//   const productDetails = useSelector((state) => state.productDetails)\n//   const { loading, error, product } = productDetails\n//   const productUpdate = useSelector((state) => state.productUpdate)\n//   const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = productUpdate\n//   useEffect(() => {\n//     if (successUpdate) {\n//       dispatch({ type: PRODUCT_UPDATE_RESET })\n//       navigate('/admin/productlist')\n//     } else {\n//       if (!product.name || product._id !== productId) {\n//         dispatch(listProductDetails(productId))\n//       } else {\n//         setName(product.name)\n//         setPrice(product.price)\n//         setImage(product.image)\n//         setBrand(product.brand)\n//         setCategory(product.category)\n//         setCountInStock(product.countInStock)\n//         setDescription(product.description)\n//         // setRating(product.rating)\n//         // setNumReviews(product.numReviews)\n//       }\n//     }\n//   }, [dispatch, navigate, productId, product,successUpdate ])\n//   const uploadFileHandler = async(e)=>{\n//     const file =e.target.files[0]\n//     const formData=new FormData()\n//     formData.append('image', file)\n//     setUploading(true)\n//     try {\n//       const config={\n//         headers:{\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       }\n//       const{data} =await axios.post('/api/upload',formData,config)\n//       setImage(data)\n//       setUploading(false)\n//     } catch (error) {\n//       console.error(error)\n//       setUploading(false)\n//     }\n//   }\n//   const submitHandler = (e) => {\n//     e.preventDefault()\n// dispatch(updateProduct({\n//   _id: productId,\n//   name,\n//   price,\n//   image,\n//   brand,\n//   category,\n//   description,\n//   countInStock,\n// }))\n//   }\n//   return (\n//     <>\n//       <Container>\n//         <Link to='/admin/productlist' className='btn btn-light my-3'>\n//           Go Back\n//         </Link>\n//         <Container>\n//           <Row>\n//             <Col md={6} className='m-auto'>\n//               <h1>Edit Product</h1>\n//               {loadingUpdate && <Loader />}\n//               {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n//               {loading ? (\n//                 <Loader />\n//               ) : error ? (\n//                 <Message variant='danger'>{error}</Message>\n//               ) : (\n//                 <Form onSubmit={submitHandler}>\n//                   <Form.Group controlId='name'>\n//                     <Form.Label>Name</Form.Label>\n//                     <Form.Control\n//                       type='name'\n//                       placeholder='Enter name'\n//                       value={name}\n//                       onChange={(e) => setName(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n//                   <Form.Group controlId='price'>\n//                     <Form.Label>price</Form.Label>\n//                     <Form.Control\n//                       type='number'\n//                       placeholder='Enter price'\n//                       value={price}\n//                       onChange={(e) => setPrice(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n//                   <Form.Group controlId='image'>\n//               <Form.Label>Image</Form.Label>\n//               <Form.Control\n//                 type='text'\n//                 placeholder='Enter image url'\n//                 value={image}\n//                 onChange={(e) => setImage(e.target.value)}\n//               ></Form.Control>\n//               <Form.Control\n//                 id='image-file'\n//                 label='Choose File'\n//                 custom\n//                 onChange={uploadFileHandler}\n//               ></Form.Control>\n//               {uploading && <Loader />}\n//             </Form.Group>\n//                   <Form.Group controlId='brand'>\n//                     <Form.Label>Brand</Form.Label>\n//                     <Form.Control\n//                       type='text'\n//                       placeholder='Enter brand '\n//                       value={brand}\n//                       onChange={(e) => setBrand(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n//                   <Form.Group controlId='countInStock'>\n//                     <Form.Label>Count In Stock</Form.Label>\n//                     <Form.Control\n//                       type='number'\n//                       placeholder='Enter countInStock'\n//                       value={countInStock}\n//                       onChange={(e) => setCountInStock(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n//                   <Form.Group controlId='category'>\n//                     <Form.Label>Category</Form.Label>\n//                     <Form.Control\n//                       type='text'\n//                       placeholder='Enter Category '\n//                       value={category}\n//                       onChange={(e) => setCategory(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n//                   <Form.Group controlId='description'>\n//                     <Form.Label>Description</Form.Label>\n//                     <Form.Control\n//                       type='text'\n//                       placeholder='Enter description '\n//                       value={description}\n//                       onChange={(e) => setDescription(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n//                   <Button type='submit' variant='primary'>\n//                     Update\n//                   </Button>\n//                 </Form>\n//               )}\n//             </Col>\n//           </Row>\n//         </Container>\n//       </Container>\n//     </>\n//   )\n// }\n// export default ProductEditScreen\nconst ProductEditScreen = () => {\n  _s();\n\n  const params = useParams();\n  const productId = params.id;\n  const navigate = useNavigate();\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState('');\n  const [brand, setBrand] = useState('');\n  const [category, setCategory] = useState('');\n  const [countInStock, setCountInStock] = useState(0);\n  const [description, setDescription] = useState('');\n  const [rating, setRating] = useState('');\n  const [numReviews, setNumReviews] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const [images, setImages] = useState([]);\n  const [showCropper, setShowCropper] = useState(false);\n  const [cropImage, setCropImage] = useState(false);\n  const [imageOne, setImageOne] = useState(null);\n  const dispatch = useDispatch();\n  const productDetails = useSelector(state => state.productDetails);\n  const {\n    loading,\n    error,\n    product\n  } = productDetails;\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productUpdate; // const categoryList = useSelector((state) => state.categoryList)\n  // const { categorieslist } = categoryList\n  // const {categorieslist}=useSelector((state)=>state.categorylist)\n\n  useEffect(() => {\n    console.log(\"ProductEditScreen\");\n\n    if (successUpdate) {\n      dispatch({\n        type: PRODUCT_UPDATE_RESET\n      });\n      navigate('/admin/productlist');\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId)); // dispatch(listCategories())\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setImage(product.image);\n        setBrand(product.brand);\n        setCategory(product.category);\n        setCountInStock(product.countInStock);\n        setDescription(product.description);\n        setRating(product.rating);\n        setNumReviews(product.numReviews);\n      }\n    }\n  }, [dispatch, navigate, productId, product, successUpdate]);\n\n  const submitHandler = e => {\n    e.preventDefault(); //  dispatch(updateProduct({\n    //    _id: productId,\n    //    name,\n    //    price,\n    //    image,\n    //    brand,\n    //    category,\n    //    description,\n    //    countInStock,\n    //  }))\n\n    const formData = new FormData();\n    formData.set('name', name);\n    formData.set('price', price); // formData.set('discountPrice', discountPrice)\n\n    formData.set('countInStock', countInStock);\n    formData.set('image', image);\n    formData.set('brand', brand);\n    formData.set('rating', rating);\n    formData.set('category', category); // formData.set('subCategory', subCategory)\n\n    formData.set('description', description);\n    formData.set('numReviews', numReviews);\n    images.forEach(image => {\n      formData.append('images', image);\n    });\n    dispatch(updateProduct(formData, productId));\n  };\n\n  const uploadFileHandler = async image => {\n    // const file = e.target.files[0]\n    const formData = new FormData();\n    formData.append('image', image, image.originalname);\n    setUploading(true);\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/api/upload', formData, config);\n      setImage(data);\n      setUploading(false);\n    } catch (error) {\n      setUploading(false);\n    }\n  };\n\n  const multiFileHandler = async e => {\n    const files = Array.from(e.target.files);\n    setImages([]);\n    files.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImages(oldArray => [...oldArray, reader.result]);\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/admin/productlist\",\n        className: \"btn btn-light my-3\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 6,\n            className: \"m-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Edit Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 33\n            }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: errorUpdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 31\n            }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 17\n            }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Form, {\n              onSubmit: submitHandler,\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"name\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"name\",\n                  placeholder: \"Enter name\",\n                  value: name,\n                  onChange: e => setName(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"price\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"number\",\n                  placeholder: \"Enter price\",\n                  value: price,\n                  onChange: e => setPrice(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"image\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Enter image URL\",\n                  value: image,\n                  onChange: e => setImage(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  type: \"file\",\n                  name: \"imageOne\",\n                  onChange: e => {\n                    setCropImage(e.target.files[0]);\n                    setShowCropper(true);\n                  },\n                  accept: \".jpg,.jpeg,.png,\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 21\n                }, this), uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 35\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"py-1\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Add extra images\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  type: \"file\",\n                  id: \"image-files\",\n                  label: \"Choose Files\",\n                  custom: true,\n                  multiple: true,\n                  onChange: multiFileHandler\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 21\n                }, this), uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 35\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"brand\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Brand\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Enter brand \",\n                  value: brand,\n                  onChange: e => setBrand(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"countInStock\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Count In Stock\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"number\",\n                  placeholder: \"Enter countInStock\",\n                  value: countInStock,\n                  onChange: e => setCountInStock(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"category\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  as: \"select\",\n                  value: category,\n                  onChange: e => setCategory(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"description\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Enter description \",\n                  value: description,\n                  onChange: e => setDescription(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"primary\",\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this), showCropper && /*#__PURE__*/_jsxDEV(CropImage, {\n              src: cropImage,\n              imageCallback: image => {\n                setImageOne(image);\n                setShowCropper(false);\n                uploadFileHandler(image);\n              },\n              closeHander: () => {\n                setShowCropper(false);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ProductEditScreen, \"aRvSkFCsArDmyEqa5koyV6NM23Q=\", true);\n\n_c = ProductEditScreen;\nexport default ProductEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductEditScreen\");","map":{"version":3,"sources":["/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/ProductEditScreen.js"],"names":["ProductEditScreen","params","useParams","productId","id","navigate","useNavigate","name","setName","useState","price","setPrice","image","setImage","brand","setBrand","category","setCategory","countInStock","setCountInStock","description","setDescription","rating","setRating","numReviews","setNumReviews","uploading","setUploading","images","setImages","showCropper","setShowCropper","cropImage","setCropImage","imageOne","setImageOne","dispatch","useDispatch","productDetails","useSelector","state","loading","error","product","productUpdate","loadingUpdate","errorUpdate","success","successUpdate","useEffect","console","log","type","PRODUCT_UPDATE_RESET","_id","listProductDetails","submitHandler","e","preventDefault","formData","FormData","set","forEach","append","updateProduct","uploadFileHandler","originalname","config","headers","data","axios","post","multiFileHandler","files","Array","from","target","file","reader","FileReader","onload","readyState","oldArray","result","readAsDataURL","value"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA,MAAMA,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAMC,MAAM,GAAGC,SAAS,EAAxB;AACA,QAAMC,SAAS,GAAGF,MAAM,CAACG,EAAzB;AACA,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,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","sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import { Link, useNavigate, useParams } from 'react-router-dom'\n// import { Form, Button, Container,  Row, Col } from 'react-bootstrap'\n// import { useDispatch, useSelector } from 'react-redux'\n// import axios from 'axios'\n// import Message from '../components/Message'\n// import Loader from '../components/Loader'\n// import { listProductDetails, updateProduct } from '../actions/productAction'\n// import { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\n\n\n\n\n// const ProductEditScreen = () => {\n//   const params = useParams()\n//   const productId = params.id;\n//   const navigate = useNavigate();\n\n//   const [name, setName] = useState('')\n//   const [price, setPrice] = useState(0)\n//   const [image, setImage] = useState('')\n//   const [brand, setBrand] = useState('')\n//   const [category, setCategory] = useState('')\n//   const [countInStock, setCountInStock] = useState(0)\n//   const [description, setDescription] = useState('')\n//  const [uploading,setUploading]=useState(false)\n  \n\n//   const dispatch = useDispatch()\n\n//   const productDetails = useSelector((state) => state.productDetails)\n//   const { loading, error, product } = productDetails\n\n//   const productUpdate = useSelector((state) => state.productUpdate)\n//   const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = productUpdate\n\n\n   \n\n\n//   useEffect(() => {\n   \n//     if (successUpdate) {\n//       dispatch({ type: PRODUCT_UPDATE_RESET })\n//       navigate('/admin/productlist')\n//     } else {\n//       if (!product.name || product._id !== productId) {\n//         dispatch(listProductDetails(productId))\n       \n//       } else {\n//         setName(product.name)\n//         setPrice(product.price)\n//         setImage(product.image)\n//         setBrand(product.brand)\n//         setCategory(product.category)\n//         setCountInStock(product.countInStock)\n//         setDescription(product.description)\n//         // setRating(product.rating)\n//         // setNumReviews(product.numReviews)\n//       }\n//     }\n//   }, [dispatch, navigate, productId, product,successUpdate ])\n\n//   const uploadFileHandler = async(e)=>{\n//     const file =e.target.files[0]\n//     const formData=new FormData()\n//     formData.append('image', file)\n//     setUploading(true)\n//     try {\n//       const config={\n//         headers:{\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       }\n//       const{data} =await axios.post('/api/upload',formData,config)\n//       setImage(data)\n//       setUploading(false)\n\n//     } catch (error) {\n//       console.error(error)\n//       setUploading(false)\n//     }\n//   }\n\n//   const submitHandler = (e) => {\n//     e.preventDefault()\n// dispatch(updateProduct({\n//   _id: productId,\n//   name,\n//   price,\n//   image,\n//   brand,\n//   category,\n//   description,\n//   countInStock,\n  \n// }))\n//   }\n\n//   return (\n//     <>\n//       <Container>\n//         <Link to='/admin/productlist' className='btn btn-light my-3'>\n//           Go Back\n//         </Link>\n//         <Container>\n//           <Row>\n//             <Col md={6} className='m-auto'>\n//               <h1>Edit Product</h1>\n\n//               {loadingUpdate && <Loader />}\n//               {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n//               {loading ? (\n//                 <Loader />\n//               ) : error ? (\n//                 <Message variant='danger'>{error}</Message>\n//               ) : (\n//                 <Form onSubmit={submitHandler}>\n//                   <Form.Group controlId='name'>\n//                     <Form.Label>Name</Form.Label>\n//                     <Form.Control\n//                       type='name'\n//                       placeholder='Enter name'\n//                       value={name}\n//                       onChange={(e) => setName(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n\n//                   <Form.Group controlId='price'>\n//                     <Form.Label>price</Form.Label>\n//                     <Form.Control\n//                       type='number'\n//                       placeholder='Enter price'\n//                       value={price}\n//                       onChange={(e) => setPrice(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n\n//                   <Form.Group controlId='image'>\n//               <Form.Label>Image</Form.Label>\n//               <Form.Control\n//                 type='text'\n//                 placeholder='Enter image url'\n//                 value={image}\n//                 onChange={(e) => setImage(e.target.value)}\n//               ></Form.Control>\n//               <Form.Control\n//                 id='image-file'\n//                 label='Choose File'\n//                 custom\n//                 onChange={uploadFileHandler}\n//               ></Form.Control>\n//               {uploading && <Loader />}\n//             </Form.Group>\n\n//                   <Form.Group controlId='brand'>\n//                     <Form.Label>Brand</Form.Label>\n//                     <Form.Control\n//                       type='text'\n//                       placeholder='Enter brand '\n//                       value={brand}\n//                       onChange={(e) => setBrand(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n\n//                   <Form.Group controlId='countInStock'>\n//                     <Form.Label>Count In Stock</Form.Label>\n//                     <Form.Control\n//                       type='number'\n//                       placeholder='Enter countInStock'\n//                       value={countInStock}\n//                       onChange={(e) => setCountInStock(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n\n//                   <Form.Group controlId='category'>\n//                     <Form.Label>Category</Form.Label>\n//                     <Form.Control\n//                       type='text'\n//                       placeholder='Enter Category '\n//                       value={category}\n//                       onChange={(e) => setCategory(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n                 \n\n//                   <Form.Group controlId='description'>\n//                     <Form.Label>Description</Form.Label>\n//                     <Form.Control\n//                       type='text'\n//                       placeholder='Enter description '\n//                       value={description}\n//                       onChange={(e) => setDescription(e.target.value)}\n//                     ></Form.Control>\n//                   </Form.Group>\n\n//                   <Button type='submit' variant='primary'>\n//                     Update\n//                   </Button>\n\n//                 </Form>\n//               )}\n             \n//             </Col>\n//           </Row>\n//         </Container>\n\n//       </Container>\n//     </>\n//   )\n// }\n\n// export default ProductEditScreen\n\n\n\nconst ProductEditScreen = () => {\n  const params = useParams()\n  const productId = params.id;\n  const navigate = useNavigate();\n\n  const [name, setName] = useState('')\n  const [price, setPrice] = useState(0)\n  const [image, setImage] = useState('')\n  const [brand, setBrand] = useState('')\n  const [category, setCategory] = useState('')\n  const [countInStock, setCountInStock] = useState(0)\n  const [description, setDescription] = useState('')\n  const [rating, setRating] = useState('')\n  const [numReviews, setNumReviews] = useState('')\n  const [uploading, setUploading] = useState(false)\n  const [images, setImages] = useState([])\n  const [showCropper, setShowCropper] = useState(false)\n  const [cropImage, setCropImage] = useState(false)\n  const [imageOne, setImageOne] = useState(null)\n\n  const dispatch = useDispatch()\n\n  const productDetails = useSelector((state) => state.productDetails)\n  const { loading, error, product } = productDetails\n\n  const productUpdate = useSelector((state) => state.productUpdate)\n  const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = productUpdate\n\n  // const categoryList = useSelector((state) => state.categoryList)\n  // const { categorieslist } = categoryList\n   \n  // const {categorieslist}=useSelector((state)=>state.categorylist)\n\n  useEffect(() => {\n    console.log(\"ProductEditScreen\")\n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET })\n      navigate('/admin/productlist')\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId))\n        // dispatch(listCategories())\n      } else {\n        setName(product.name)\n        setPrice(product.price)\n        setImage(product.image)\n        setBrand(product.brand)\n        setCategory(product.category)\n        setCountInStock(product.countInStock)\n        setDescription(product.description)\n        setRating(product.rating)\n        setNumReviews(product.numReviews)\n      }\n    }\n  }, [dispatch, navigate, productId, product, successUpdate])\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    //  dispatch(updateProduct({\n    //    _id: productId,\n    //    name,\n    //    price,\n    //    image,\n    //    brand,\n    //    category,\n    //    description,\n    //    countInStock,\n    //  }))\n    const formData = new FormData()\n    formData.set('name', name)\n    formData.set('price', price)\n    // formData.set('discountPrice', discountPrice)\n    formData.set('countInStock', countInStock)\n    formData.set('image', image)\n    formData.set('brand', brand)\n    formData.set('rating', rating)\n    formData.set('category', category)\n    // formData.set('subCategory', subCategory)\n    formData.set('description', description)\n    formData.set('numReviews', numReviews)\n    images.forEach((image) => {\n      formData.append('images', image)\n    })\n    dispatch(updateProduct(formData, productId))\n  }\n\n  const uploadFileHandler = async (image) => {\n    // const file = e.target.files[0]\n    const formData = new FormData()\n    formData.append('image', image,image.originalname)\n    setUploading(true)\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n\n      const { data } = await axios.post('/api/upload', formData, config)\n\n      setImage(data)\n      setUploading(false)\n    } catch (error) {\n      setUploading(false)\n    }\n  }\n\n  const multiFileHandler = async (e) => {\n    const files = Array.from(e.target.files)\n    setImages([])\n    files.forEach((file) => {\n      const reader = new FileReader()\n\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImages((oldArray) => [...oldArray, reader.result])\n        }\n      }\n      reader.readAsDataURL(file)\n    })\n  }\n\n  return (\n    <>\n      <Container>\n        <Link to='/admin/productlist' className='btn btn-light my-3'>\n          Go Back\n        </Link>\n        <Container>\n          <Row>\n            <Col md={6} className='m-auto'>\n              <h1>Edit Product</h1>\n              {loadingUpdate && <Loader />}\n              {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n              {loading ? (\n                <Loader />\n              ) : error ? (\n                <Message variant='danger'>{error}</Message>\n              ) : (\n                <Form onSubmit={submitHandler}>\n                  <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                      type='name'\n                      placeholder='Enter name'\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='price'>\n                    <Form.Label>price</Form.Label>\n                    <Form.Control\n                      type='number'\n                      placeholder='Enter price'\n                      value={price}\n                      onChange={(e) => setPrice(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='image'>\n                    <Form.Label>Image</Form.Label>\n                    <Form.Control\n                      type='text'\n                      placeholder='Enter image URL'\n                      value={image}\n                      onChange={(e) => setImage(e.target.value)}\n                    ></Form.Control>\n                    <FormControl\n                      type=\"file\"\n                      name=\"imageOne\"\n                    onChange={(e) => {\n                      setCropImage(e.target.files[0])\n                      setShowCropper(true)\n                    }}\n                    accept=\".jpg,.jpeg,.png,\"\n                    />\n                    {uploading && <Loader />}\n                  </Form.Group>\n\n                  <Form.Group className=\"py-1\">\n                    <Form.Label>Add extra images</Form.Label>\n                    <FormControl\n                      type=\"file\"\n                      id=\"image-files\"\n                      label=\"Choose Files\"\n                      custom\n                      multiple\n                      onChange={multiFileHandler}\n                    />\n                    {uploading && <Loader />}\n                  </Form.Group>\n\n                  <Form.Group controlId='brand'>\n                    <Form.Label>Brand</Form.Label>\n                    <Form.Control\n                      type='text'\n                      placeholder='Enter brand '\n                      value={brand}\n                      onChange={(e) => setBrand(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='countInStock'>\n                    <Form.Label>Count In Stock</Form.Label>\n                    <Form.Control\n                      type='number'\n                      placeholder='Enter countInStock'\n                      value={countInStock}\n                      onChange={(e) => setCountInStock(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='category'>\n                    <Form.Label>Category</Form.Label>\n                    <Form.Control\n                      as='select'\n                      value={category}\n                      onChange={(e) => setCategory(e.target.value)}\n                      >\n                      {/* {categorieslist && categorieslist.map((Categories)=>(\n                          <option key={Categories._id} value={Categories.name}>\n                          {Categories.name}\n                          </option>\n                     ))} */}\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId='description'>\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                      type='text'\n                      placeholder='Enter description '\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Button type='submit' variant='primary'>\n                    Update\n                  </Button>\n\n                </Form>\n              )}\n              {showCropper && (\n            <CropImage\n              src={cropImage}\n              imageCallback={(image) => {\n                setImageOne(image)\n                setShowCropper(false)\n                uploadFileHandler(image)\n              }}\n              closeHander={() => {\n                setShowCropper(false)\n              }}\n            />\n          )}\n            </Col>\n          </Row>\n        </Container>\n\n      </Container>\n    </>\n  )\n}\n\nexport default ProductEditScreen"]},"metadata":{},"sourceType":"module"}