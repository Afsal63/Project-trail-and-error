{"ast":null,"code":"var _jsxFileName = \"/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetails, updateUser } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserEditScreen = () => {\n  _s();\n\n  const params = useParams();\n  const userId = params.id;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: success\n  } = userUpdate;\n  console.log(user);\n  useEffect(() => {\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserDetails(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n\n      if (user.isAdmin) {\n        setIsAdmin(true);\n      }\n\n      console.log(user.isAdmin);\n      console.log(isAdmin);\n    }\n  }, [dispatch, userId, user]);\n\n  const submitHandler = e => {\n    e.prevetDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-light my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        varian: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 49\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isadmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Is Admin\" // value={isAdmin}\n            ,\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserEditScreen, \"mso2ePAowsBKIyYkGWVHkPL2Yl0=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/Users/afsal/Desktop/THE-PROJECT1/frontend/src/screens/UserEditScreen.js"],"names":["React","useEffect","useState","Link","useParams","Form","Button","useDispatch","useSelector","Message","Loader","FormContainer","getUserDetails","updateUser","USER_UPDATE_RESET","UserEditScreen","params","userId","id","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","console","log","_id","submitHandler","e","prevetDefault","target","value","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA0C,wBAA1C;AACA,SAASC,iBAAT,QAAkC,4BAAlC;;;;AAGA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AACzB,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAMa,MAAM,GAACD,MAAM,CAACE,EAApB;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMuB,QAAQ,GAAGlB,WAAW,EAA5B;AAEA,QAAMmB,WAAW,GAAGlB,WAAW,CAAEmB,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BJ,WAAjC;AAEA,QAAMK,UAAU,GAAEvB,WAAW,CAAEmB,KAAD,IAASA,KAAK,CAACI,UAAhB,CAA7B;AACA,QAAM;AAACH,IAAAA,OAAO,EAACI,aAAT;AAAuBH,IAAAA,KAAK,EAACI,WAA7B;AAAyCC,IAAAA,OAAO,EAACA;AAAjD,MAA0DH,UAAhE;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAAC6B,IAAI,CAACX,IAAN,IAAcW,IAAI,CAACO,GAAL,KAAapB,MAA/B,EAAuC;AACnCQ,MAAAA,QAAQ,CAACb,cAAc,CAACK,MAAD,CAAf,CAAR;AAEH,KAHD,MAGO;AACHG,MAAAA,OAAO,CAACU,IAAI,CAACX,IAAN,CAAP;AACAG,MAAAA,QAAQ,CAACQ,IAAI,CAACT,KAAN,CAAR;;AAEA,UAAGS,IAAI,CAACP,OAAR,EAAgB;AAEhBC,QAAAA,UAAU,CAAC,IAAD,CAAV;AAEC;;AACDW,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACP,OAAjB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ;AAEH;AACJ,GAjBQ,EAiBN,CAACE,QAAD,EAAUR,MAAV,EAAiBa,IAAjB,CAjBM,CAAT;;AAmBA,QAAMQ,aAAa,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,aAAF;AAEH,GAHD;;AAIA,sBACI;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,iBAAT;AAA2B,MAAA,SAAS,EAAC,oBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,aAAD;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKZ,OAAO,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAAH,GAAgBC,KAAK,gBAAG,QAAE,OAAF;AAAU,QAAA,MAAM,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAAH,gBACzB,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAES,aAAhB;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AACI,YAAA,IAAI,EAAC,MADT;AAEI,YAAA,WAAW,EAAC,YAFhB;AAGI,YAAA,KAAK,EAAEnB,IAHX;AAII,YAAA,QAAQ,EAAGoB,CAAD,IAAOnB,OAAO,CAACmB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAWI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,OAAtB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AACI,YAAA,IAAI,EAAC,OADT;AAEI,YAAA,WAAW,EAAC,aAFhB;AAGI,YAAA,KAAK,EAAErB,KAHX;AAII,YAAA,QAAQ,EAAGkB,CAAD,IAAOjB,QAAQ,CAACiB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJ7B;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAsBI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,SAAtB;AAAA,iCAEI,QAAC,IAAD,CAAM,KAAN;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,KAAK,EAAC,UAFV,CAGI;AAHJ;AAII,YAAA,OAAO,EAAEnB,OAJb;AAMI,YAAA,QAAQ,EAAGgB,CAAD,IAAOf,UAAU,CAACe,CAAC,CAACE,MAAF,CAASE,OAAV;AAN/B;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAtBJ,eAoCI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHR;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADJ;AAoDH,CA5FD;;GAAM5B,c;UACaX,S,EAOEG,W,EAEGC,W,EAGFA,W;;;KAbhBO,c;AA8FN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails ,updateUser} from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\n\nconst UserEditScreen = () => {\n    const params = useParams()\n    const userId=params.id;\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector((state) => state.userDetails)\n    const { loading, error, user } = userDetails\n\n    const userUpdate =useSelector((state)=>state.userUpdate)\n    const {loading:loadingUpdate,error:errorUpdate,success:success}=userUpdate\n    console.log(user)\n\n    useEffect(() => {\n        if (!user.name || user._id !== userId) {\n            dispatch(getUserDetails(userId))\n\n        } else {\n            setName(user.name)\n            setEmail(user.email)\n\n            if(user.isAdmin){\n\n            setIsAdmin(true)\n                \n            }\n            console.log(user.isAdmin)\n            console.log(isAdmin)\n            \n        }\n    }, [dispatch,userId,user])\n\n    const submitHandler = (e) => {\n        e.prevetDefault()\n\n    }\n    return (\n        <>\n            <Link to='/admin/userlist' className='btn btn-light my-3'>\n                Go Back\n            </Link>\n            <FormContainer>\n                <h1>Edit User</h1>\n                {loading ? <Loader /> : error ? < Message varian='danger'>{error}</Message> : (\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type='name'\n                                placeholder='Enter name'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}>\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='email'>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type='email'\n                                placeholder='Enter email'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}>\n                            </Form.Control>\n                        </Form.Group>\n\n\n                        <Form.Group controlId='isadmin'>\n\n                            <Form.Check\n                                type='checkbox'\n                                label='Is Admin'\n                                // value={isAdmin}\n                                checked={isAdmin}\n                                \n                                onChange={(e) => setIsAdmin(e.target.checked)}>\n                               \n                            </Form.Check>\n                            \n                        </Form.Group>\n\n                        <Button type='submit' variant='primary'>\n                            Update</Button>\n                    </Form>\n                )}\n\n            </FormContainer>\n        </>\n    )\n}\n\nexport default UserEditScreen"]},"metadata":{},"sourceType":"module"}